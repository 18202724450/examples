/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.streams.classes;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WikiFeed extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikiFeed\",\"namespace\":\"io.confluent.examples.streams.classes\",\"fields\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"is_new\",\"type\":\"boolean\"},{\"name\":\"content\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence user;
  @Deprecated public boolean is_new;
  @Deprecated public java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public WikiFeed() {}

  /**
   * All-args constructor.
   */
  public WikiFeed(java.lang.CharSequence user, java.lang.Boolean is_new, java.lang.CharSequence content) {
    this.user = user;
    this.is_new = is_new;
    this.content = content;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return is_new;
    case 2: return content;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (java.lang.CharSequence)value$; break;
    case 1: is_new = (java.lang.Boolean)value$; break;
    case 2: content = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'is_new' field.
   */
  public java.lang.Boolean getIsNew() {
    return is_new;
  }

  /**
   * Sets the value of the 'is_new' field.
   * @param value the value to set.
   */
  public void setIsNew(java.lang.Boolean value) {
    this.is_new = value;
  }

  /**
   * Gets the value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /** Creates a new WikiFeed RecordBuilder */
  public static io.confluent.examples.streams.classes.WikiFeed.Builder newBuilder() {
    return new io.confluent.examples.streams.classes.WikiFeed.Builder();
  }
  
  /** Creates a new WikiFeed RecordBuilder by copying an existing Builder */
  public static io.confluent.examples.streams.classes.WikiFeed.Builder newBuilder(io.confluent.examples.streams.classes.WikiFeed.Builder other) {
    return new io.confluent.examples.streams.classes.WikiFeed.Builder(other);
  }
  
  /** Creates a new WikiFeed RecordBuilder by copying an existing WikiFeed instance */
  public static io.confluent.examples.streams.classes.WikiFeed.Builder newBuilder(io.confluent.examples.streams.classes.WikiFeed other) {
    return new io.confluent.examples.streams.classes.WikiFeed.Builder(other);
  }
  
  /**
   * RecordBuilder for WikiFeed instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikiFeed>
    implements org.apache.avro.data.RecordBuilder<WikiFeed> {

    private java.lang.CharSequence user;
    private boolean is_new;
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(io.confluent.examples.streams.classes.WikiFeed.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.confluent.examples.streams.classes.WikiFeed.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.is_new)) {
        this.is_new = data().deepCopy(fields()[1].schema(), other.is_new);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.content)) {
        this.content = data().deepCopy(fields()[2].schema(), other.content);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing WikiFeed instance */
    private Builder(io.confluent.examples.streams.classes.WikiFeed other) {
            super(io.confluent.examples.streams.classes.WikiFeed.SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.is_new)) {
        this.is_new = data().deepCopy(fields()[1].schema(), other.is_new);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.content)) {
        this.content = data().deepCopy(fields()[2].schema(), other.content);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'user' field */
    public java.lang.CharSequence getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder clearUser() {
      user = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'is_new' field */
    public java.lang.Boolean getIsNew() {
      return is_new;
    }
    
    /** Sets the value of the 'is_new' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder setIsNew(boolean value) {
      validate(fields()[1], value);
      this.is_new = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'is_new' field has been set */
    public boolean hasIsNew() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'is_new' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder clearIsNew() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'content' field */
    public java.lang.CharSequence getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.content = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'content' field */
    public io.confluent.examples.streams.classes.WikiFeed.Builder clearContent() {
      content = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public WikiFeed build() {
      try {
        WikiFeed record = new WikiFeed();
        record.user = fieldSetFlags()[0] ? this.user : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.is_new = fieldSetFlags()[1] ? this.is_new : (java.lang.Boolean) defaultValue(fields()[1]);
        record.content = fieldSetFlags()[2] ? this.content : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
