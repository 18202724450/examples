/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.streams.classes;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PageView extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PageView\",\"namespace\":\"io.confluent.examples.streams.classes\",\"fields\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"page\",\"type\":\"string\"},{\"name\":\"industry\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence user;
  @Deprecated public java.lang.CharSequence page;
  @Deprecated public java.lang.CharSequence industry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PageView() {}

  /**
   * All-args constructor.
   */
  public PageView(java.lang.CharSequence user, java.lang.CharSequence page, java.lang.CharSequence industry) {
    this.user = user;
    this.page = page;
    this.industry = industry;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return page;
    case 2: return industry;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (java.lang.CharSequence)value$; break;
    case 1: page = (java.lang.CharSequence)value$; break;
    case 2: industry = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'page' field.
   */
  public java.lang.CharSequence getPage() {
    return page;
  }

  /**
   * Sets the value of the 'page' field.
   * @param value the value to set.
   */
  public void setPage(java.lang.CharSequence value) {
    this.page = value;
  }

  /**
   * Gets the value of the 'industry' field.
   */
  public java.lang.CharSequence getIndustry() {
    return industry;
  }

  /**
   * Sets the value of the 'industry' field.
   * @param value the value to set.
   */
  public void setIndustry(java.lang.CharSequence value) {
    this.industry = value;
  }

  /** Creates a new PageView RecordBuilder */
  public static io.confluent.examples.streams.classes.PageView.Builder newBuilder() {
    return new io.confluent.examples.streams.classes.PageView.Builder();
  }
  
  /** Creates a new PageView RecordBuilder by copying an existing Builder */
  public static io.confluent.examples.streams.classes.PageView.Builder newBuilder(io.confluent.examples.streams.classes.PageView.Builder other) {
    return new io.confluent.examples.streams.classes.PageView.Builder(other);
  }
  
  /** Creates a new PageView RecordBuilder by copying an existing PageView instance */
  public static io.confluent.examples.streams.classes.PageView.Builder newBuilder(io.confluent.examples.streams.classes.PageView other) {
    return new io.confluent.examples.streams.classes.PageView.Builder(other);
  }
  
  /**
   * RecordBuilder for PageView instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PageView>
    implements org.apache.avro.data.RecordBuilder<PageView> {

    private java.lang.CharSequence user;
    private java.lang.CharSequence page;
    private java.lang.CharSequence industry;

    /** Creates a new Builder */
    private Builder() {
      super(io.confluent.examples.streams.classes.PageView.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.confluent.examples.streams.classes.PageView.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.page)) {
        this.page = data().deepCopy(fields()[1].schema(), other.page);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.industry)) {
        this.industry = data().deepCopy(fields()[2].schema(), other.industry);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PageView instance */
    private Builder(io.confluent.examples.streams.classes.PageView other) {
            super(io.confluent.examples.streams.classes.PageView.SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.page)) {
        this.page = data().deepCopy(fields()[1].schema(), other.page);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.industry)) {
        this.industry = data().deepCopy(fields()[2].schema(), other.industry);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'user' field */
    public java.lang.CharSequence getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public io.confluent.examples.streams.classes.PageView.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user' field */
    public io.confluent.examples.streams.classes.PageView.Builder clearUser() {
      user = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'page' field */
    public java.lang.CharSequence getPage() {
      return page;
    }
    
    /** Sets the value of the 'page' field */
    public io.confluent.examples.streams.classes.PageView.Builder setPage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.page = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'page' field has been set */
    public boolean hasPage() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'page' field */
    public io.confluent.examples.streams.classes.PageView.Builder clearPage() {
      page = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'industry' field */
    public java.lang.CharSequence getIndustry() {
      return industry;
    }
    
    /** Sets the value of the 'industry' field */
    public io.confluent.examples.streams.classes.PageView.Builder setIndustry(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.industry = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'industry' field has been set */
    public boolean hasIndustry() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'industry' field */
    public io.confluent.examples.streams.classes.PageView.Builder clearIndustry() {
      industry = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public PageView build() {
      try {
        PageView record = new PageView();
        record.user = fieldSetFlags()[0] ? this.user : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.page = fieldSetFlags()[1] ? this.page : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.industry = fieldSetFlags()[2] ? this.industry : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
